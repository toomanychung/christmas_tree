#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('sophies-christmas-trees:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const app = require('../app');
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

if (process.env.ENV === 'dev') {
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');

  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);

  /**
   * Event listener for HTTP server "error" event.
   */
  /* eslint no-console: 0 */
  server.on('error', (error) => {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string'
      ? `Pipe ${port}`
      : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  });

  /**
   * Event listener for HTTP server "listening" event.
   */

  server.on('listening', () => {
    const addr = server.address();
    const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
  });
} else {
  const options = {
    key: fs.readFileSync('/etc/letsencrypt/live/smellyasshole.club/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/smellyasshole.club/cert.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/smellyasshole.club/chain.pem')
  };
  https.createServer(options, (req, res) => {
    res.writeHead(200);
    res.end('hello world\n');
  }).listen(8000);
}
